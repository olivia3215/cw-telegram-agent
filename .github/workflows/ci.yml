name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:

# needed so the workflow can write PR comments on same-repo PRs
permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # python-version: ["3.12", "3.13"]
        python-version: ["3.13"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio anyio telethon pytest-cov

      - name: Prepare state dir
        run: mkdir -p state/photos state/media

      - name: Run tests (with coverage)
        env:
          PYTHONPATH: .
          CINDY_AGENT_STATE_DIR: state
        run: |
          pytest -vv -s --cov=. --cov-report=term-missing:skip-covered --cov-report=xml

      - name: Extract coverage percent
        id: cov
        run: |
          python - <<'PY'
          import os, xml.etree.ElementTree as ET
          root = ET.parse('coverage.xml').getroot()
          pct = None
          if 'line-rate' in root.attrib:
              pct = float(root.attrib['line-rate']) * 100.0
          else:
              lines_valid = int(root.attrib.get('lines-valid', 0))
              lines_covered = int(root.attrib.get('lines-covered', 0))
              pct = (lines_covered / lines_valid * 100.0) if lines_valid else 0.0
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"coverage_pct={pct:.2f}\n")
          PY

      # Show coverage in the job summary (works for fork PRs too)
      - name: Post coverage to job summary
        if: always()
        run: |
          {
            echo "### Test coverage"
            echo
            echo "${{ steps.cov.outputs.coverage_pct }}%"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v7
        with:
          script: |
            const marker = '<!-- COVERAGE-REPORT -->';
            const pct = `${{ steps.cov.outputs.coverage_pct }}`;
            const body = `${marker}
            **Test coverage:** ${pct}%`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existing = comments.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
            }
